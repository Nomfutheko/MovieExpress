// Generated 26 Oct 2021 09:47 - Singular Systems Object Generator Version 2.2.694
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using System.Data;
using System.Data.SqlClient;


namespace MELib.TransactionItems
{
    [Serializable]
    public class TransactionItem
     : SingularBusinessBase<TransactionItem>
    {
        #region " Properties and Methods "

        #region " Properties "

        public static PropertyInfo<int> TransctionItemIDProperty = RegisterProperty<int>(c => c.TransctionItemID, "ID", 0);
        /// <summary>
        /// Gets the ID value
        /// </summary>
        [Display(AutoGenerateField = false), Key]
        public int TransctionItemID
        {
            get { return GetProperty(TransctionItemIDProperty); }
        }

        public static PropertyInfo<int> TransactionIDProperty = RegisterProperty<int>(c => c.TransactionID, "Transaction", 0);
        /// <summary>
        /// Gets and sets the Transaction value
        /// </summary>
        [Display(Name = "Transaction", Description = ""),
        Required(ErrorMessage = "Transaction required")]
        public int TransactionID
        {
            get { return GetProperty(TransactionIDProperty); }
            set { SetProperty(TransactionIDProperty, value); }
        }

        public static PropertyInfo<int?> UserMovieIDProperty = RegisterProperty<int?>(c => c.UserMovieID, "User Movie", null);
        /// <summary>
        /// Gets and sets the User Movie value
        /// </summary>
        [Display(Name = "User Movie", Description = ""),
        Required(ErrorMessage = "User Movie required")]
        public int? UserMovieID
        {
            get { return GetProperty(UserMovieIDProperty); }
            set { SetProperty(UserMovieIDProperty, value); }
        }

        public static PropertyInfo<int?> ProductIDProperty = RegisterProperty<int?>(c => c.ProductID, "Product", null);
        /// <summary>
        /// Gets and sets the Product value
        /// </summary>
        [Display(Name = "Product", Description = ""),
        Required(ErrorMessage = "Product required")]
        public int? ProductID
        {
            get { return GetProperty(ProductIDProperty); }
            set { SetProperty(ProductIDProperty, value); }
        }

        public static PropertyInfo<int> QuantityProperty = RegisterProperty<int>(c => c.Quantity, "Quantity", 0);
        /// <summary>
        /// Gets and sets the Quantity value
        /// </summary>
        [Display(Name = "Quantity", Description = ""),
        Required(ErrorMessage = "Quantity required")]
        public int Quantity
        {
            get { return GetProperty(QuantityProperty); }
            set { SetProperty(QuantityProperty, value); }
        }

        public static PropertyInfo<Decimal> ItemPriceProperty = RegisterProperty<Decimal>(c => c.ItemPrice, "Item Price", 0D);
        /// <summary>
        /// Gets and sets the Item Price value
        /// </summary>
        [Display(Name = "Item Price", Description = ""),
        Required(ErrorMessage = "Item Price required")]
        public Decimal ItemPrice
        {
            get { return GetProperty(ItemPriceProperty); }
            set { SetProperty(ItemPriceProperty, value); }
        }

        public static PropertyInfo<Boolean> IsActiveIndProperty = RegisterProperty<Boolean>(c => c.IsActiveInd, "Is Active", false);
        /// <summary>
        /// Gets and sets the Is Active value
        /// </summary>
        [Display(Name = "Is Active", Description = ""),
        Required(ErrorMessage = "Is Active required")]
        public Boolean IsActiveInd
        {
            get { return GetProperty(IsActiveIndProperty); }
            set { SetProperty(IsActiveIndProperty, value); }
        }

        public static PropertyInfo<DateTime?> DeletedDateProperty = RegisterProperty<DateTime?>(c => c.DeletedDate, "Deleted Date");
        /// <summary>
        /// Gets and sets the Deleted Date value
        /// </summary>
        [Display(Name = "Deleted Date", Description = "")]
        public DateTime? DeletedDate
        {
            get
            {
                return GetProperty(DeletedDateProperty);
            }
            set
            {
                SetProperty(DeletedDateProperty, value);
            }
        }

        public static PropertyInfo<int> DeletedByProperty = RegisterProperty<int>(c => c.DeletedBy, "Deleted By", 0);
        /// <summary>
        /// Gets and sets the Deleted By value
        /// </summary>
        [Display(Name = "Deleted By", Description = "")]
        public int DeletedBy
        {
            get { return GetProperty(DeletedByProperty); }
            set { SetProperty(DeletedByProperty, value); }
        }

        public static PropertyInfo<SmartDate> CreatedDateProperty = RegisterProperty<SmartDate>(c => c.CreatedDate, "Created Date", new SmartDate(DateTime.Now));
        /// <summary>
        /// Gets the Created Date value
        /// </summary>
        [Display(AutoGenerateField = false)]
        public SmartDate CreatedDate
        {
            get { return GetProperty(CreatedDateProperty); }
        }

        public static PropertyInfo<int> CreatedByProperty = RegisterProperty<int>(c => c.CreatedBy, "Created By", 0);
        /// <summary>
        /// Gets the Created By value
        /// </summary>
        [Display(AutoGenerateField = false)]
        public int CreatedBy
        {
            get { return GetProperty(CreatedByProperty); }
        }

        public static PropertyInfo<SmartDate> ModifiedDateProperty = RegisterProperty<SmartDate>(c => c.ModifiedDate, "Modified Date", new SmartDate(DateTime.Now));
        /// <summary>
        /// Gets the Modified Date value
        /// </summary>
        [Display(AutoGenerateField = false)]
        public SmartDate ModifiedDate
        {
            get { return GetProperty(ModifiedDateProperty); }
        }

        public static PropertyInfo<int> ModifiedByProperty = RegisterProperty<int>(c => c.ModifiedBy, "Modified By", 0);
        /// <summary>
        /// Gets the Modified By value
        /// </summary>
        [Display(AutoGenerateField = false)]
        public int ModifiedBy
        {
            get { return GetProperty(ModifiedByProperty); }
        }

        #endregion

        #region " Methods "

        protected override object GetIdValue()
        {
            return GetProperty(TransctionItemIDProperty);
        }

        public override string ToString()
        {
            if (this.CreatedDate.ToString().Length == 0)
            {
                if (this.IsNew)
                {
                    return String.Format("New {0}", "Transaction Item");
                }
                else
                {
                    return String.Format("Blank {0}", "Transaction Item");
                }
            }
            else
            {
                return this.CreatedDate.ToString();
            }
        }

        #endregion

        #endregion

        #region " Validation Rules "

        protected override void AddBusinessRules()
        {
            base.AddBusinessRules();
        }

        #endregion

        #region " Data Access & Factory Methods "

        protected override void OnCreate()
        {
            // This is called when a new object is created
            // Set any variables here, not in the constructor or NewTransactionItem() method.
        }

        public static TransactionItem NewTransactionItem()
        {
            return DataPortal.CreateChild<TransactionItem>();
        }

        public TransactionItem()
        {
            MarkAsChild();
        }

        internal static TransactionItem GetTransactionItem(SafeDataReader dr)
        {
            var t = new TransactionItem();
            t.Fetch(dr);
            return t;
        }

        protected void Fetch(SafeDataReader sdr)
        {
            using (BypassPropertyChecks)
            {
                int i = 0;
                LoadProperty(TransctionItemIDProperty, sdr.GetInt32(i++));
                LoadProperty(TransactionIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
                LoadProperty(UserMovieIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
                LoadProperty(ProductIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
                LoadProperty(QuantityProperty, sdr.GetInt32(i++));
                LoadProperty(ItemPriceProperty, sdr.GetDecimal(i++));
                LoadProperty(IsActiveIndProperty, sdr.GetBoolean(i++));
                LoadProperty(DeletedDateProperty, sdr.GetValue(i++));
                LoadProperty(DeletedByProperty, sdr.GetInt32(i++));
                LoadProperty(CreatedDateProperty, sdr.GetSmartDate(i++));
                LoadProperty(CreatedByProperty, sdr.GetInt32(i++));
                LoadProperty(ModifiedDateProperty, sdr.GetSmartDate(i++));
                LoadProperty(ModifiedByProperty, sdr.GetInt32(i++));
            }

            MarkAsChild();
            MarkOld();
            BusinessRules.CheckRules();
        }

        protected override Action<SqlCommand> SetupSaveCommand(SqlCommand cm)
        {
            LoadProperty(ModifiedByProperty, Settings.CurrentUser.UserID);

            AddPrimaryKeyParam(cm, TransctionItemIDProperty);

            cm.Parameters.AddWithValue("@TransactionID", GetProperty(TransactionIDProperty));
            cm.Parameters.AddWithValue("@UserMovieID", GetProperty(UserMovieIDProperty));
            cm.Parameters.AddWithValue("@ProductID", GetProperty(ProductIDProperty));
            cm.Parameters.AddWithValue("@Quantity", GetProperty(QuantityProperty));
            cm.Parameters.AddWithValue("@ItemPrice", GetProperty(ItemPriceProperty));
            cm.Parameters.AddWithValue("@IsActiveInd", GetProperty(IsActiveIndProperty));
            cm.Parameters.AddWithValue("@DeletedDate", Singular.Misc.NothingDBNull(DeletedDate));
            cm.Parameters.AddWithValue("@DeletedBy", GetProperty(DeletedByProperty));
            cm.Parameters.AddWithValue("@ModifiedBy", GetProperty(ModifiedByProperty));

            return (scm) =>
            {
    // Post Save
    if (this.IsNew)
                {
                    LoadProperty(TransctionItemIDProperty, scm.Parameters["@TransctionItemID"].Value);
                }
            };
        }

        protected override void SaveChildren()
        {
            // No Children
        }

        protected override void SetupDeleteCommand(SqlCommand cm)
        {
            cm.Parameters.AddWithValue("@TransctionItemID", GetProperty(TransctionItemIDProperty));
        }

        #endregion

    }

}